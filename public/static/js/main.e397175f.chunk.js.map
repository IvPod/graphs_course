{"version":3,"sources":["components/MyLocation.js","components/Weather.js","utils/alert.js","components/Roads.js","utils/bfs.js","utils/dijkstra.js","utils/distance.js","utils/astar.js","utils/closest_points.js","components/Trek.js","components/App.js","index.js"],"names":["MyLocation","map","useMap","divRef","useRef","useEffect","L","DomEvent","disableClickPropagation","current","className","ref","type","onClick","locate","on","e","setView","latlng","getZoom","console","log","title","GET_WEATHER","gql","Weather","location","useQuery","variables","lat","lon","lng","loading","error","data","role","scope","weather","name","description","temp","pressure","humidity","windSpeed","alert","message","document","getElementById","innerHTML","Roads","PLOT_ROADS","useLazyQuery","plotRoads","roadsButton","disabled","bb","getBounds","toBBoxString","lines","roads","forEach","road","push","coordinates","Polyline","pathOptions","color","positions","nextNode","distMap","visited","dists","keys","key","next","includes","value","BFSearch","graph","startNode","endNode","Map","get","edges","child","set","node","weight","parents","distance","newdistance","shortestPath","parent","reverse","line","visitedPoints","path","dijkstraSearch","deg2rad","deg","Math","PI","latlon1","latlon2","lat1r","lon1r","lat2r","lon2r","u","sin","v","asin","sqrt","cos","heuristic","astarSearch","endCoordinates","closestPoints","adjList","start","finish","minstart","minfinish","Trek","GET_GRAPH","getGraph","resultLayer","result","algorithm","LayersControl","Overlay","FeatureGroup","Tooltip","toFixed","length","point","Circle","center","fillColor","fillOpacity","stroke","radius","uuidv4","treksButton","graphInBox","id","rest","cp","resultBFS","bfsSearch","resultDijikstra","resultAStar","aStarSearch","position","App","Icon","Default","imagePath","useState","setLocation","startPosition","setStartPosition","endPosition","setEndPosition","Moving","useMapEvents","moveend","getCenter","contains","click","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Node","fields","merge","ReactDOM","render","StrictMode","ApolloProvider"],"mappings":"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","file":"static/js/main.e397175f.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { useMap } from 'react-leaflet'\nimport L from 'leaflet'\n\nconst MyLocation = () => {\n  const map = useMap()\n  const divRef = useRef(null)\n\n  useEffect(() => {\n    L.DomEvent.disableClickPropagation(divRef.current)\n  }, [])\n\n  const findMyLocation = () => {\n    map\n      .locate()\n      .on('locationfound', (e) => {\n        map.setView(e.latlng, map.getZoom())\n      })\n      .on(\n        'locationerror',\n        console.log('Ошибка позиционирования')\n      )\n  }\n  return (\n    <div\n      className=\"leaflet-bottom leaflet-left\"\n      ref={divRef}\n    >\n      <div className=\"leaflet-control\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={findMyLocation}\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"top\"\n          title=\"Моя позиция\"\n        >\n          <i className=\"bi bi-geo-alt\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default MyLocation\n","import { useQuery, gql } from '@apollo/client'\n\nconst GET_WEATHER = gql`\n  query GetWeather($lat: Float, $lon: Float) {\n    weather(lat: $lat, lon: $lon) {\n      name\n      description\n      temp\n      humidity\n      pressure\n      windSpeed\n    }\n  }\n`\nconst Weather = ({ location }) => {\n  const { loading, error, data } = useQuery(GET_WEATHER, {\n    variables: { lat: location.lat, lon: location.lng },\n  })\n\n  if (error) {\n    return (\n      <div>\n        <p>Нет данных</p>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"row align-items-start\">\n      <div className=\"col\">\n        <table className=\"table table-info table-sm\">\n          <tbody>\n            <tr>\n              <th scope=\"row\">Адрес</th>\n              <td>\n                {data?.weather ? data.weather.name : ''}\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Погода</th>\n              <td>\n                {data?.weather\n                  ? data.weather.description\n                  : ''}\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Температура</th>\n              <td>\n                {data?.weather ? data.weather.temp : ''}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div className=\"col\">\n        <table className=\"table table-info table-sm\">\n          <tbody>\n            <tr>\n              <th scope=\"row\">Давление</th>\n              <td>\n                {data?.weather ? data.weather.pressure : ''}\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Влажность</th>\n              <td>\n                {data?.weather ? data.weather.humidity : ''}\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Скорость ветра</th>\n              <td>\n                {data?.weather\n                  ? data.weather.windSpeed\n                  : ''}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default Weather\n","const alert = (message, type) => {\n  var alertPlaceholder = document.getElementById(\n    'alertPlaceholder'\n  )\n  alertPlaceholder.innerHTML =\n    '<div class=\"alert alert-' +\n    type +\n    ' alert-dismissible\" role=\"alert\">' +\n    message +\n    '<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button></div>'\n}\n\nexport default alert\n","import L from 'leaflet'\nimport { useEffect, useRef } from 'react'\nimport { useMap, Polyline } from 'react-leaflet'\nimport { useLazyQuery, gql } from '@apollo/client'\n\nimport alert from '../utils/alert'\n\nconst Roads = () => {\n  const map = useMap()\n  const divRef = useRef(null)\n\n  useEffect(() => {\n    L.DomEvent.disableClickPropagation(divRef.current)\n  }, [])\n\n  const PLOT_ROADS = gql`\n    query Roads($bb: String!) {\n      roads(bb: $bb) {\n        coordinates\n      }\n    }\n  `\n  const [plotRoads, { loading, error, data }] =\n    useLazyQuery(PLOT_ROADS)\n\n  const roadsButton = (\n    <div\n      className=\"leaflet-bottom leaflet-right\"\n      ref={divRef}\n    >\n      <div className=\"leaflet-control\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          disabled={loading}\n          onClick={() =>\n            plotRoads({\n              variables: {\n                bb: map.getBounds().toBBoxString(),\n              },\n            })\n          }\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"top\"\n          title=\"Дороги\"\n        >\n          {loading ? (\n            <span\n              className=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n            ></span>\n          ) : (\n            <i className=\"bi bi-signpost-split\"></i>\n          )}\n        </button>\n      </div>\n    </div>\n  )\n  if (error) {\n    alert(\n      'Ошибка построения, возможно, слишком большая область!',\n      'warning'\n    )\n    return roadsButton\n  }\n\n  if (data) {\n    let lines = []\n    data?.roads?.forEach((road) =>\n      lines.push(road.coordinates)\n    )\n    return (\n      <>\n        <Polyline\n          pathOptions={{ color: 'lightskyblue' }}\n          positions={lines}\n        />\n        {roadsButton}\n      </>\n    )\n  }\n  return roadsButton\n}\n\nexport default Roads\n","// Выбор следующего узла, движемся по Map, пока элементы есть в списке посещенных\n// ==========================================================================\nconst nextNode = (distMap, visited) => {\n  const dists = distMap.keys()\n  let key = dists.next()\n  while (visited.includes(key.value)) {\n    key = dists.next()\n  }\n  return key.value\n}\n\n// Основная логика поиска пути\n// ==========================================================================\nconst BFSearch = (graph, startNode, endNode) => {\n  const distMap = new Map()\n  graph\n    .get(startNode)\n    .edges.forEach((child) =>\n      distMap.set(child.node, child.weight)\n    )\n\n  const parents = { endNode: null }\n  graph\n    .get(startNode)\n    .edges.forEach(\n      (child) => (parents[child.node] = startNode)\n    )\n\n  const visited = []\n  let node = nextNode(distMap, visited)\n\n  // Если заменить следующую строку на \"while (node) { \" - получится фактически полный перебор brute force search\n  while (node) {\n    let distance = distMap.get(node)\n\n    let children = graph.get(node).edges\n    // eslint-disable-next-line no-loop-func\n    children.forEach((child) => {\n      if (child.node !== startNode) {\n        let newdistance = distance + child.weight\n        if (\n          !distMap.get(child.node) ||\n          distMap.get(child.node) > newdistance\n        ) {\n          distMap.set(child.node, newdistance)\n          parents[child.node] = node\n        }\n      }\n    })\n\n    visited.push(node)\n    node = nextNode(distMap, visited)\n  }\n\n  // -------------------------------------\n  const shortestPath = [endNode]\n  let parent = parents[endNode]\n\n  while (parent) {\n    shortestPath.push(parent)\n    parent = parents[parent]\n  }\n  shortestPath.reverse()\n\n  const line = []\n  shortestPath.map((node) =>\n    line.push(graph.get(node).coordinates)\n  )\n\n  const visitedPoints = []\n  visited.map((node) =>\n    visitedPoints.push(graph.get(node).coordinates)\n  )\n\n  return {\n    distance: distMap.get(endNode),\n    path: shortestPath,\n    line,\n    visitedPoints,\n  }\n}\n\nexport default BFSearch\n","// Выбор следующего узла, движемся по Map, пока элементы есть в списке посещенных\n// ==========================================================================\nconst nextNode = (distMap, visited) => {\n  let next = null\n\n  distMap.forEach((value, key) => {\n    let currentIsClosest =\n      next === null || value < distMap.get(next)\n    if (currentIsClosest && !visited.includes(key)) {\n      next = key\n    }\n  })\n  return next\n}\n\n// Основная логика поиска пути\n// ==========================================================================\nconst dijkstraSearch = (graph, startNode, endNode) => {\n  const distMap = new Map()\n  graph\n    .get(startNode)\n    .edges.forEach((child) =>\n      distMap.set(child.node, child.weight)\n    )\n\n  const parents = { endNode: null }\n  graph\n    .get(startNode)\n    .edges.forEach(\n      (child) => (parents[child.node] = startNode)\n    )\n\n  const visited = []\n  let node = nextNode(distMap, visited)\n\n  // Если заменить следующую строку на \"while (node) { \" - получится фактически полный перебор brute force search\n  while (node && node !== endNode) {\n    let distance = distMap.get(node)\n\n    let children = graph.get(node).edges\n    // eslint-disable-next-line no-loop-func\n    children.forEach((child) => {\n      if (child.node !== startNode) {\n        let newdistance = distance + child.weight\n        if (\n          !distMap.get(child.node) ||\n          distMap.get(child.node) > newdistance\n        ) {\n          distMap.set(child.node, newdistance)\n          parents[child.node] = node\n        }\n      }\n    })\n\n    visited.push(node)\n    node = nextNode(distMap, visited)\n  }\n\n  // -------------------------------------\n  const shortestPath = [endNode]\n  let parent = parents[endNode]\n\n  while (parent) {\n    shortestPath.push(parent)\n    parent = parents[parent]\n  }\n  shortestPath.reverse()\n\n  const line = []\n  shortestPath.map((node) =>\n    line.push(graph.get(node).coordinates)\n  )\n\n  const visitedPoints = []\n  visited.map((node) =>\n    visitedPoints.push(graph.get(node).coordinates)\n  )\n\n  return {\n    distance: distMap.get(endNode),\n    path: shortestPath,\n    line,\n    visitedPoints,\n  }\n}\n\nexport default dijkstraSearch\n","const earthRadiusKm = 6371\n\n// Конвертация градусов в радианы\nconst deg2rad = (deg) => {\n  return (deg * Math.PI) / 180\n}\n\n// Вычисление расстояния между двумя точками на поверхности\nconst distance = (latlon1, latlon2) => {\n  const lat1r = deg2rad(latlon1[0])\n  const lon1r = deg2rad(latlon1[1])\n  const lat2r = deg2rad(latlon2[0])\n  const lon2r = deg2rad(latlon2[1])\n  const u = Math.sin((lat2r - lat1r) / 2)\n  const v = Math.sin((lon2r - lon1r) / 2)\n\n  return (\n    2.0 *\n    earthRadiusKm *\n    Math.asin(\n      Math.sqrt(\n        u * u + Math.cos(lat1r) * Math.cos(lat2r) * v * v\n      )\n    ) *\n    1000\n  )\n}\n\nexport default distance\n","import distance from './distance'\n\n// Выбор следующего узла, движемся по Map, пока элементы есть в списке посещенных\n// ==========================================================================\nconst nextNode = (distMap, visited, graph) => {\n  let next = null\n\n  distMap.forEach((value, key) => {\n    let currentIsClosest =\n      next === null ||\n      value + graph.get(key).heuristic <\n        distMap.get(next) + graph.get(next).heuristic\n    if (currentIsClosest && !visited.includes(key)) {\n      next = key\n    }\n  })\n  return next\n}\n\n// Основная логика поиска пути\n// ==========================================================================\nconst astarSearch = (graph, startNode, endNode) => {\n  const distMap = new Map()\n  const endCoordinates = graph.get(endNode).coordinates\n  graph.forEach((value, key, map) => {\n    map.set(key, {\n      ...value,\n      heuristic: distance(\n        value.coordinates,\n        endCoordinates\n      ),\n    })\n  })\n\n  graph\n    .get(startNode)\n    .edges.forEach((child) =>\n      distMap.set(child.node, child.weight)\n    )\n\n  const parents = { endNode: null }\n  graph\n    .get(startNode)\n    .edges.forEach(\n      (child) => (parents[child.node] = startNode)\n    )\n\n  const visited = []\n  let node = nextNode(distMap, visited, graph)\n\n  // Если заменить следующую строку на \"while (node) { \" - получится фактически полный перебор brute force search\n  while (node && node !== endNode) {\n    let distance = distMap.get(node)\n\n    let children = graph.get(node).edges\n    // eslint-disable-next-line no-loop-func\n    children.forEach((child) => {\n      if (child.node !== startNode) {\n        let newdistance = distance + child.weight\n        if (\n          !distMap.get(child.node) ||\n          distMap.get(child.node) > newdistance\n        ) {\n          distMap.set(child.node, newdistance)\n          parents[child.node] = node\n        }\n      }\n    })\n\n    visited.push(node)\n    node = nextNode(distMap, visited, graph)\n  }\n\n  // -------------------------------------\n  const shortestPath = [endNode]\n  let parent = parents[endNode]\n\n  while (parent) {\n    shortestPath.push(parent)\n    parent = parents[parent]\n  }\n  shortestPath.reverse()\n\n  const line = []\n  shortestPath.map((node) =>\n    line.push(graph.get(node).coordinates)\n  )\n\n  const visitedPoints = []\n  visited.map((node) =>\n    visitedPoints.push(graph.get(node).coordinates)\n  )\n\n  return {\n    distance: distMap.get(endNode),\n    path: shortestPath,\n    line,\n    visitedPoints,\n  }\n}\n\nexport default astarSearch\n","import distance from './distance.js'\n\nconst closestPoints = (adjList, start, finish) => {\n  const minstart = [0, 99999]\n  const minfinish = [0, 99999]\n\n  adjList.forEach((node, key) => {\n    if (minstart[1] > distance(node.coordinates, start)) {\n      minstart[1] = distance(node.coordinates, start)\n      minstart[0] = key\n    }\n    if (minfinish[1] > distance(node.coordinates, finish)) {\n      minfinish[1] = distance(node.coordinates, finish)\n      minfinish[0] = key\n    }\n  })\n\n  return [minstart[0], minfinish[0]]\n}\n\nexport default closestPoints\n","import L from 'leaflet'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useEffect, useRef } from 'react'\nimport {\n  useMap,\n  Polyline,\n  Circle,\n  LayersControl,\n  FeatureGroup,\n  Tooltip,\n} from 'react-leaflet'\nimport { useLazyQuery, gql } from '@apollo/client'\n\nimport alert from '../utils/alert'\nimport bfsSearch from '../utils/bfs'\nimport dijkstraSearch from '../utils/dijkstra'\nimport aStarSearch from '../utils/astar'\nimport closestPoints from '../utils/closest_points'\n\nconst Trek = ({ start, finish }) => {\n  const map = useMap()\n  const divRef = useRef(null)\n\n  useEffect(() => {\n    L.DomEvent.disableClickPropagation(divRef.current)\n  }, [])\n\n  const GET_GRAPH = gql`\n    query Treks(\n      $bb: String!\n      $start: [Float]\n      $finish: [Float]\n    ) {\n      graphInBox(bb: $bb, start: $start, finish: $finish) {\n        id\n        coordinates\n        heuristic\n        edges {\n          node\n          weight\n        }\n      }\n    }\n  `\n\n  const [getGraph, { loading, error, data }] =\n    useLazyQuery(GET_GRAPH)\n\n  const resultLayer = (result, algorithm, color) => (\n    <LayersControl.Overlay name={`Алгоритм ${algorithm}`}>\n      <FeatureGroup>\n        <Tooltip>\n          {' '}\n          {`Алгоритм ${algorithm}`} <br />{' '}\n          {result.distance &&\n            `Длина маршрута = ${result.distance.toFixed(\n              1\n            )} (м)`}{' '}\n          <br />{' '}\n          {`Пройдено узлов: ${result.visitedPoints.length}`}{' '}\n        </Tooltip>\n        <Polyline\n          pathOptions={{ color: 'lightskyblue' }}\n          positions={result.line}\n        />\n        {result.visitedPoints.map((point) => (\n          <Circle\n            center={point}\n            pathOptions={{\n              fillColor: color,\n              fillOpacity: 0.8,\n            }}\n            stroke={false}\n            radius={10}\n            key={uuidv4()}\n          />\n        ))}\n      </FeatureGroup>\n    </LayersControl.Overlay>\n  )\n\n  const treksButton = (\n    <div className=\"leaflet-top leaflet-right\" ref={divRef}>\n      <div className=\"leaflet-control\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          disabled={loading}\n          onClick={() =>\n            getGraph({\n              variables: {\n                bb: map.getBounds().toBBoxString(),\n                start: [start.lat, start.lng],\n                finish: [finish.lat, finish.lng],\n              },\n            })\n          }\n          data-bs-toggle=\"tooltip\"\n          data-bs-placement=\"top\"\n          title=\"Маршруты\"\n        >\n          {loading ? (\n            <span\n              className=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n            ></span>\n          ) : (\n            <i className=\"bi bi-compass\"></i>\n          )}\n        </button>\n      </div>\n    </div>\n  )\n\n  if (error) {\n    alert(\n      'Ошибка построения, вероятно, слишком большая область!',\n      'warning'\n    )\n    return treksButton\n  }\n\n  if (data) {\n    const adjList = new Map()\n    data.graphInBox.forEach(({ id, ...rest }) =>\n      adjList.set(id, rest)\n    )\n    const cp = closestPoints(\n      adjList,\n      [start.lat, start.lng],\n      [finish.lat, finish.lng]\n    )\n\n    const resultBFS = bfsSearch(adjList, cp[0], cp[1])\n    const resultDijikstra = dijkstraSearch(\n      adjList,\n      cp[0],\n      cp[1]\n    )\n    const resultAStar = aStarSearch(adjList, cp[0], cp[1])\n\n    return (\n      <>\n        <Circle\n          center={adjList.get(cp[0]).coordinates}\n          pathOptions={{\n            fillColor: 'blue',\n            fillOpacity: 0.8,\n          }}\n          stroke={false}\n          radius={20}\n        />\n        <Circle\n          center={adjList.get(cp[1]).coordinates}\n          pathOptions={{\n            fillColor: 'blue',\n            fillOpacity: 0.8,\n          }}\n          stroke={false}\n          radius={20}\n        />\n        <LayersControl position=\"topleft\">\n          {resultBFS &&\n            resultLayer(resultBFS, 'BFS', '#f96')}\n          {resultDijikstra &&\n            resultLayer(\n              resultDijikstra,\n              'Dijikstra',\n              '#0cc'\n            )}\n          {resultAStar &&\n            resultLayer(resultAStar, 'A*', '#e75480')}\n        </LayersControl>\n      </>\n    )\n  }\n\n  return treksButton\n}\n\nexport default Trek\n","import L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport { useState } from 'react'\nimport {\n  MapContainer,\n  TileLayer,\n  useMapEvents,\n  Marker,\n  Tooltip,\n} from 'react-leaflet'\n\nimport MyLocation from './MyLocation'\nimport Weather from './Weather'\nimport Roads from './Roads'\nimport Trek from './Trek'\n\nconst App = () => {\n  L.Icon.Default.imagePath = '/images/'\n  const [location, setLocation] = useState({\n    lat: 59.88122,\n    lng: 29.90677,\n  })\n\n  const [startPosition, setStartPosition] = useState(null)\n  const [endPosition, setEndPosition] = useState(null)\n\n  const Moving = () => {\n    const map = useMapEvents({\n      moveend() {\n        setLocation(map.getCenter())\n        if (\n          startPosition &&\n          !map.getBounds().contains(startPosition)\n        ) {\n          setStartPosition(null)\n        }\n        if (\n          endPosition &&\n          !map.getBounds().contains(endPosition)\n        ) {\n          setEndPosition(null)\n        }\n      },\n      click(e) {\n        if (endPosition) {\n          setStartPosition(endPosition)\n          setEndPosition(e.latlng)\n        } else if (startPosition) {\n          setEndPosition(e.latlng)\n        } else {\n          setStartPosition(e.latlng)\n        }\n      },\n    })\n    return null\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row justify-content-between mt-3\">\n        <div className=\"col-auto\">\n          <h1> Graphs 101</h1>\n        </div>\n        <div className=\"col-auto\">\n          <Weather location={location} />\n        </div>\n      </div>\n      <MapContainer\n        center={location}\n        zoom={15}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\"\n        />\n        {startPosition && (\n          <Marker position={startPosition}>\n            <Tooltip>Start</Tooltip>\n          </Marker>\n        )}\n        {endPosition && (\n          <Marker position={endPosition}>\n            <Tooltip>Finish</Tooltip>\n          </Marker>\n        )}\n        <MyLocation />\n        <Roads />\n        {startPosition && endPosition ? (\n          <Trek\n            start={startPosition}\n            finish={endPosition}\n          />\n        ) : null}\n        <Moving />\n      </MapContainer>\n      <div id=\"alertPlaceholder\"></div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from '@apollo/client'\n\nimport App from './components/App'\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Node: {\n        fields: {\n          edges: {\n            merge: false,\n          },\n        },\n      },\n    },\n  }),\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}